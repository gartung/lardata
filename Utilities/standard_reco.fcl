#include "services_argoneut.fcl"
#include "caldata.fcl"
#include "hitfindermodules.fcl"
#include "clustermodules.fcl"
#include "trackfindermodules.fcl"

process_name: Reco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "reco_hist.root" }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  message:      @local::standard_warning
  user:         @local::argoneut_services 	     
}


#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
  caldata:    @local::argoneut_calwire	    
  ffthit:     @local::argoneut_hitfinder # note if job is for MC, use argoneut_mc_hitfinder
  dbcluster:  @local::argoneut_dbcluster	    
  hough:      @local::argoneut_houghlinefinder
  linemerger: @local::argoneut_linemerger	    
  track:      @local::argoneut_track	    
  harris:     @local::argoneut_endpointmod    
 }

 analyzers:
 {
  dbclusterana: @local::argoneut_dbclusterana
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ caldata, ffthit, dbcluster, hough, linemerger, track, harris ] 
 ana:  [ dbclusterana ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ ana, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "standard_reco.root" #default file name, can override from command line with -o or --output
 }
}

